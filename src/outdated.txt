/* this is the old parser I built while still experimenting with everything.
   Putting it here for now while I refactor some stuff and figure things out
   a little more. */

stmts:          stmt
                {
                    $$ = new Block();
                    $$->statements.push_back($<stmt>1);
                }
                
|               stmts stmt
                {
                    $1->statements.push_back($<stmt>2);
                }
;

stmt:           functionDecl
                {
                    
                }
                
|               variableDecl
                {
                    
                }
|               expr
                {
                    //$$ = new ExpressionStatement(*$1); 
                }
;

functionDecl:   typeSpecifier IDENTIFIER "(" ")" block
                {
                    std::cout << "\nIDENTIFIER: " << *$2 << "\n\n"; 
                }
;

block:          "{" stmts "}"
                {
                    $$ = $2;
                }
|               "{" "}"
                {
                    $$ = new Block();
                }
;

expr:           returnExpr
                {
                
                }
                
|               INTCONSTANT 
                {
                    IntegerNode* IntNode = new IntegerNode(atoi($1->c_str()));
                    IntNode->printVal();
                    delete $1;
                }
                
|               expr operation expr
                {
                    $$ = new BinaryOpNode($<token>2, *$1, *$3);
                }
;

operation:      "+"
;

returnExpr:     RETURN expr ";"
                {
                   std::cout << "\n\nRETURNEXPRESSION\n\n: " ;
                }
;

variableDecl:   typeSpecifier IDENTIFIER ";"
                {
                    std::cout << "A variable with no initialization!";
                    std::cout << std::endl;
                    
                }
|               typeSpecifier IDENTIFIER "=" expr ";"
                {
                    std::cout << "\nFound a variable! it is a(n): ";
                    if ($<token>1 == 258) {
                        std::cout << "void!\n\n";
                    } else if ($<token>1 == 259) {
                        std::cout << "integer!\n\n";
                    } else if ($<token>1 == 260) {
                        std::cout << "character!\n\n";
                    }
                }
;

typeSpecifier:  INT  { std::cout << "HELLOOO INT TYPE!" << $1 << std::endl; }
|               CHAR { std::cout << "HELLOOO CHAR TYPE!" << $1 << std::endl; }
|               VOID { std::cout << "HELLOOO VOID TYPE!" << $1 << std::endl; }
;

%% 